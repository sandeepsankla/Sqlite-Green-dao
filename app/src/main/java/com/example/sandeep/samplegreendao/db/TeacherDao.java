package com.example.sandeep.samplegreendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEACHER".
*/
public class TeacherDao extends AbstractDao<Teacher, String> {

    public static final String TABLENAME = "TEACHER";

    /**
     * Properties of entity Teacher.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Subject = new Property(1, String.class, "subject", false, "SUBJECT");
        public final static Property Rating = new Property(2, String.class, "rating", false, "RATING");
        public final static Property Teacher_id = new Property(3, String.class, "teacher_id", true, "TEACHER_ID");
    }


    public TeacherDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACHER\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"SUBJECT\" TEXT," + // 1: subject
                "\"RATING\" TEXT," + // 2: rating
                "\"TEACHER_ID\" TEXT PRIMARY KEY NOT NULL );"); // 3: teacher_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Teacher entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(2, subject);
        }
 
        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(3, rating);
        }
 
        String teacher_id = entity.getTeacher_id();
        if (teacher_id != null) {
            stmt.bindString(4, teacher_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Teacher entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(2, subject);
        }
 
        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(3, rating);
        }
 
        String teacher_id = entity.getTeacher_id();
        if (teacher_id != null) {
            stmt.bindString(4, teacher_id);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public Teacher readEntity(Cursor cursor, int offset) {
        Teacher entity = new Teacher( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subject
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rating
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // teacher_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Teacher entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSubject(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRating(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTeacher_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Teacher entity, long rowId) {
        return entity.getTeacher_id();
    }
    
    @Override
    public String getKey(Teacher entity) {
        if(entity != null) {
            return entity.getTeacher_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Teacher entity) {
        return entity.getTeacher_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
