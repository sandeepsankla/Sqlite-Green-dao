package com.example.sandeep.samplegreendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, String> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property F_name = new Property(1, String.class, "f_name", false, "F_NAME");
        public final static Property S_class = new Property(2, String.class, "s_class", false, "S_CLASS");
        public final static Property Roll_no = new Property(3, String.class, "roll_no", true, "ROLL_NO");
    }


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"F_NAME\" TEXT," + // 1: f_name
                "\"S_CLASS\" TEXT," + // 2: s_class
                "\"ROLL_NO\" TEXT PRIMARY KEY NOT NULL );"); // 3: roll_no
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String f_name = entity.getF_name();
        if (f_name != null) {
            stmt.bindString(2, f_name);
        }
 
        String s_class = entity.getS_class();
        if (s_class != null) {
            stmt.bindString(3, s_class);
        }
 
        String roll_no = entity.getRoll_no();
        if (roll_no != null) {
            stmt.bindString(4, roll_no);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String f_name = entity.getF_name();
        if (f_name != null) {
            stmt.bindString(2, f_name);
        }
 
        String s_class = entity.getS_class();
        if (s_class != null) {
            stmt.bindString(3, s_class);
        }
 
        String roll_no = entity.getRoll_no();
        if (roll_no != null) {
            stmt.bindString(4, roll_no);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // f_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // s_class
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // roll_no
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setF_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setS_class(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoll_no(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Student entity, long rowId) {
        return entity.getRoll_no();
    }
    
    @Override
    public String getKey(Student entity) {
        if(entity != null) {
            return entity.getRoll_no();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        return entity.getRoll_no() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
