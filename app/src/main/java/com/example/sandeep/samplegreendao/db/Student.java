package com.example.sandeep.samplegreendao.db;

import org.greenrobot.greendao.annotation.*;

import com.example.sandeep.samplegreendao.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "STUDENT".
 */
@Entity(active = true)
public class Student {
    private String roll_no;
    private String f_name;
    private String s_class;
    private String name;

    @Id(autoincrement = true)
    private Long id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient StudentDao myDao;

    @ToOne(joinProperty = "id")
    private Teacher _id;

    @Generated
    private transient Long _id__resolvedKey;

    @Generated
    public Student() {
    }

    public Student(Long id) {
        this.id = id;
    }

    @Generated
    public Student(String roll_no, String f_name, String s_class, String name, Long id) {
        this.roll_no = roll_no;
        this.f_name = f_name;
        this.s_class = s_class;
        this.name = name;
        this.id = id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getStudentDao() : null;
    }

    public String getRoll_no() {
        return roll_no;
    }

    public void setRoll_no(String roll_no) {
        this.roll_no = roll_no;
    }

    public String getF_name() {
        return f_name;
    }

    public void setF_name(String f_name) {
        this.f_name = f_name;
    }

    public String getS_class() {
        return s_class;
    }

    public void setS_class(String s_class) {
        this.s_class = s_class;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Teacher get_id() {
        Long __key = this.id;
        if (_id__resolvedKey == null || !_id__resolvedKey.equals(__key)) {
            __throwIfDetached();
            TeacherDao targetDao = daoSession.getTeacherDao();
            Teacher _idNew = targetDao.load(__key);
            synchronized (this) {
                _id = _idNew;
            	_id__resolvedKey = __key;
            }
        }
        return _id;
    }

    @Generated
    public void set_id(Teacher _id) {
        synchronized (this) {
            this._id = _id;
            id = _id == null ? null : _id.getId();
            _id__resolvedKey = id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
